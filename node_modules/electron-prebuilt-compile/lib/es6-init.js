'use strict';

var _electron = require('electron');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _electronCompile = require('electron-compile');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findPackageJson(initScript) {
  if (initScript === '/' || initScript.match(/^[A-Za-z]:$/)) {
    throw new Error("Can't find package.json");
  }

  // Walk up the parent directories until we find package.json. Make sure that
  // we're not actually stumbling upon a parent npm package
  let ret = _path2.default.join(initScript, 'package.json');
  if (_fs2.default.statSyncNoException(ret) && !_path2.default.resolve(_path2.default.dirname(ret), '..').match(/[\\\/]node_modules$/i)) {
    return ret;
  }

  return findPackageJson(_path2.default.dirname(initScript));
}

/**
 * Some debugger environment reconstruct process argument and inject args ignoring original order,
 * extract to find out right path for init script.
 *
 */
function getInitScriptPath() {
  const rawArgv = process.argv.filter(x => x.indexOf(`--inspect=`) === -1 && x.indexOf(`--debug-brk`))[2];
  return _path2.default.resolve(rawArgv);
}

function main() {
  const initScript = getInitScriptPath();
  const packageJson = findPackageJson(initScript);
  const packageJsonData = JSON.parse(_fs2.default.readFileSync(packageJson, 'utf8'));

  _electron.app.setName(packageJsonData.productName || packageJsonData.name);
  _electron.app.setVersion(packageJsonData.version);

  // Reconstitute the original arguments
  const args = process.argv.slice(2);
  process.argv = [process.argv[0]].concat(args);

  //passthrough electron-compile command args if it's specified
  const parsedArgs = require('yargs').alias('c', 'cachedir').alias('s', 'sourcemapdir').argv;
  (0, _electronCompile.init)(_path2.default.dirname(packageJson), initScript, null, parsedArgs.c || null, parsedArgs.s || null);
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lczYtaW5pdC5qcyJdLCJuYW1lcyI6WyJmaW5kUGFja2FnZUpzb24iLCJpbml0U2NyaXB0IiwibWF0Y2giLCJFcnJvciIsInJldCIsImpvaW4iLCJzdGF0U3luY05vRXhjZXB0aW9uIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJnZXRJbml0U2NyaXB0UGF0aCIsInJhd0FyZ3YiLCJwcm9jZXNzIiwiYXJndiIsImZpbHRlciIsIngiLCJpbmRleE9mIiwibWFpbiIsInBhY2thZ2VKc29uIiwicGFja2FnZUpzb25EYXRhIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwic2V0TmFtZSIsInByb2R1Y3ROYW1lIiwibmFtZSIsInNldFZlcnNpb24iLCJ2ZXJzaW9uIiwiYXJncyIsInNsaWNlIiwiY29uY2F0IiwicGFyc2VkQXJncyIsInJlcXVpcmUiLCJhbGlhcyIsImMiLCJzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBLFNBQVNBLGVBQVQsQ0FBeUJDLFVBQXpCLEVBQXFDO0FBQ25DLE1BQUlBLGVBQWUsR0FBZixJQUFzQkEsV0FBV0MsS0FBWCxDQUFpQixhQUFqQixDQUExQixFQUEyRDtBQUN6RCxVQUFNLElBQUlDLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLE1BQUlDLE1BQU0sZUFBS0MsSUFBTCxDQUFVSixVQUFWLEVBQXNCLGNBQXRCLENBQVY7QUFDQSxNQUFJLGFBQUdLLG1CQUFILENBQXVCRixHQUF2QixLQUErQixDQUFDLGVBQUtHLE9BQUwsQ0FBYSxlQUFLQyxPQUFMLENBQWFKLEdBQWIsQ0FBYixFQUFnQyxJQUFoQyxFQUFzQ0YsS0FBdEMsQ0FBNEMsc0JBQTVDLENBQXBDLEVBQXlHO0FBQ3ZHLFdBQU9FLEdBQVA7QUFDRDs7QUFFRCxTQUFPSixnQkFBZ0IsZUFBS1EsT0FBTCxDQUFhUCxVQUFiLENBQWhCLENBQVA7QUFDRDs7QUFFRDs7Ozs7QUFLQSxTQUFTUSxpQkFBVCxHQUE2QjtBQUMzQixRQUFNQyxVQUFVQyxRQUFRQyxJQUFSLENBQWFDLE1BQWIsQ0FBcUJDLENBQUQsSUFBT0EsRUFBRUMsT0FBRixDQUFXLFlBQVgsTUFBNEIsQ0FBQyxDQUE3QixJQUFrQ0QsRUFBRUMsT0FBRixDQUFXLGFBQVgsQ0FBN0QsRUFBdUYsQ0FBdkYsQ0FBaEI7QUFDQSxTQUFPLGVBQUtSLE9BQUwsQ0FBYUcsT0FBYixDQUFQO0FBQ0Q7O0FBRUQsU0FBU00sSUFBVCxHQUFnQjtBQUNkLFFBQU1mLGFBQWFRLG1CQUFuQjtBQUNBLFFBQU1RLGNBQWNqQixnQkFBZ0JDLFVBQWhCLENBQXBCO0FBQ0EsUUFBTWlCLGtCQUFrQkMsS0FBS0MsS0FBTCxDQUFXLGFBQUdDLFlBQUgsQ0FBZ0JKLFdBQWhCLEVBQTZCLE1BQTdCLENBQVgsQ0FBeEI7O0FBRUEsZ0JBQUlLLE9BQUosQ0FBWUosZ0JBQWdCSyxXQUFoQixJQUErQkwsZ0JBQWdCTSxJQUEzRDtBQUNBLGdCQUFJQyxVQUFKLENBQWVQLGdCQUFnQlEsT0FBL0I7O0FBRUE7QUFDQSxRQUFNQyxPQUFPaEIsUUFBUUMsSUFBUixDQUFhZ0IsS0FBYixDQUFtQixDQUFuQixDQUFiO0FBQ0FqQixVQUFRQyxJQUFSLEdBQWUsQ0FBQ0QsUUFBUUMsSUFBUixDQUFhLENBQWIsQ0FBRCxFQUFrQmlCLE1BQWxCLENBQXlCRixJQUF6QixDQUFmOztBQUVBO0FBQ0EsUUFBTUcsYUFBYUMsUUFBUSxPQUFSLEVBQWlCQyxLQUFqQixDQUF1QixHQUF2QixFQUE0QixVQUE1QixFQUF3Q0EsS0FBeEMsQ0FBOEMsR0FBOUMsRUFBbUQsY0FBbkQsRUFBbUVwQixJQUF0RjtBQUNBLDZCQUFLLGVBQUtKLE9BQUwsQ0FBYVMsV0FBYixDQUFMLEVBQWdDaEIsVUFBaEMsRUFBNEMsSUFBNUMsRUFBa0Q2QixXQUFXRyxDQUFYLElBQWdCLElBQWxFLEVBQXdFSCxXQUFXSSxDQUFYLElBQWdCLElBQXhGO0FBQ0Q7O0FBRURsQiIsImZpbGUiOiJlczYtaW5pdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwcCB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7aW5pdH0gZnJvbSAnZWxlY3Ryb24tY29tcGlsZSc7XG5cbmZ1bmN0aW9uIGZpbmRQYWNrYWdlSnNvbihpbml0U2NyaXB0KSB7XG4gIGlmIChpbml0U2NyaXB0ID09PSAnLycgfHwgaW5pdFNjcmlwdC5tYXRjaCgvXltBLVphLXpdOiQvKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGZpbmQgcGFja2FnZS5qc29uXCIpO1xuICB9XG5cbiAgLy8gV2FsayB1cCB0aGUgcGFyZW50IGRpcmVjdG9yaWVzIHVudGlsIHdlIGZpbmQgcGFja2FnZS5qc29uLiBNYWtlIHN1cmUgdGhhdFxuICAvLyB3ZSdyZSBub3QgYWN0dWFsbHkgc3R1bWJsaW5nIHVwb24gYSBwYXJlbnQgbnBtIHBhY2thZ2VcbiAgbGV0IHJldCA9IHBhdGguam9pbihpbml0U2NyaXB0LCAncGFja2FnZS5qc29uJylcbiAgaWYgKGZzLnN0YXRTeW5jTm9FeGNlcHRpb24ocmV0KSAmJiAhcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShyZXQpLCAnLi4nKS5tYXRjaCgvW1xcXFxcXC9dbm9kZV9tb2R1bGVzJC9pKSkge1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICByZXR1cm4gZmluZFBhY2thZ2VKc29uKHBhdGguZGlybmFtZShpbml0U2NyaXB0KSk7XG59XG5cbi8qKlxuICogU29tZSBkZWJ1Z2dlciBlbnZpcm9ubWVudCByZWNvbnN0cnVjdCBwcm9jZXNzIGFyZ3VtZW50IGFuZCBpbmplY3QgYXJncyBpZ25vcmluZyBvcmlnaW5hbCBvcmRlcixcbiAqIGV4dHJhY3QgdG8gZmluZCBvdXQgcmlnaHQgcGF0aCBmb3IgaW5pdCBzY3JpcHQuXG4gKlxuICovXG5mdW5jdGlvbiBnZXRJbml0U2NyaXB0UGF0aCgpIHtcbiAgY29uc3QgcmF3QXJndiA9IHByb2Nlc3MuYXJndi5maWx0ZXIoKHgpID0+IHguaW5kZXhPZihgLS1pbnNwZWN0PWApID09PSAtMSAmJiB4LmluZGV4T2YoYC0tZGVidWctYnJrYCkpWzJdO1xuICByZXR1cm4gcGF0aC5yZXNvbHZlKHJhd0FyZ3YpO1xufVxuXG5mdW5jdGlvbiBtYWluKCkge1xuICBjb25zdCBpbml0U2NyaXB0ID0gZ2V0SW5pdFNjcmlwdFBhdGgoKTtcbiAgY29uc3QgcGFja2FnZUpzb24gPSBmaW5kUGFja2FnZUpzb24oaW5pdFNjcmlwdCk7XG4gIGNvbnN0IHBhY2thZ2VKc29uRGF0YSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHBhY2thZ2VKc29uLCAndXRmOCcpKTtcblxuICBhcHAuc2V0TmFtZShwYWNrYWdlSnNvbkRhdGEucHJvZHVjdE5hbWUgfHwgcGFja2FnZUpzb25EYXRhLm5hbWUpO1xuICBhcHAuc2V0VmVyc2lvbihwYWNrYWdlSnNvbkRhdGEudmVyc2lvbik7XG5cbiAgLy8gUmVjb25zdGl0dXRlIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgcHJvY2Vzcy5hcmd2ID0gW3Byb2Nlc3MuYXJndlswXV0uY29uY2F0KGFyZ3MpO1xuXG4gIC8vcGFzc3Rocm91Z2ggZWxlY3Ryb24tY29tcGlsZSBjb21tYW5kIGFyZ3MgaWYgaXQncyBzcGVjaWZpZWRcbiAgY29uc3QgcGFyc2VkQXJncyA9IHJlcXVpcmUoJ3lhcmdzJykuYWxpYXMoJ2MnLCAnY2FjaGVkaXInKS5hbGlhcygncycsICdzb3VyY2VtYXBkaXInKS5hcmd2O1xuICBpbml0KHBhdGguZGlybmFtZShwYWNrYWdlSnNvbiksIGluaXRTY3JpcHQsIG51bGwsIHBhcnNlZEFyZ3MuYyB8fCBudWxsLCBwYXJzZWRBcmdzLnMgfHwgbnVsbCk7XG59XG5cbm1haW4oKVxuIl19