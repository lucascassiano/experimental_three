'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Icon = require('./Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Input = function Input(_ref) {
  var blank = _ref.blank,
      customClassName = _ref.className,
      danger = _ref.danger,
      flip = _ref.flip,
      icon = _ref.icon,
      large = _ref.large,
      small = _ref.small,
      success = _ref.success,
      width = _ref.width,
      other = _objectWithoutProperties(_ref, ['blank', 'className', 'danger', 'flip', 'icon', 'large', 'small', 'success', 'width']);

  var className = (0, _classnames2.default)('uk-input ' + customClassName, {
    'uk-form-blank': blank,
    'uk-form-danger': danger,
    'uk-form-large': large,
    'uk-form-small': small,
    'uk-form-success': success,
    'uk-form-width-large': width === 'large',
    'uk-form-width-medium': width === 'medium',
    'uk-form-width-small': width === 'small',
    'uk-width-1-1': width === 'full'
  });
  var input = React.createElement('input', _extends({}, other, { className: className }));
  if (icon) {
    return React.createElement(
      'div',
      { className: 'uk-inline' },
      React.createElement(_Icon2.default, { className: (0, _classnames2.default)('uk-form-icon', { 'uk-form-icon-flip': flip }), icon: icon }),
      input
    );
  }

  return input;
};

Input.propTypes = {
  blank: _propTypes2.default.bool,
  className: _propTypes2.default.string,
  danger: _propTypes2.default.bool,
  flip: _propTypes2.default.bool,
  icon: _propTypes2.default.string,
  large: _propTypes2.default.bool,
  small: _propTypes2.default.bool,
  success: _propTypes2.default.bool,
  width: _propTypes2.default.oneOf(['full', 'large', 'medium', 'small', false])
};

Input.defaultProps = {
  blank: false,
  className: '',
  danger: false,
  flip: false,
  icon: '',
  large: false,
  small: false,
  success: false,
  width: false
};

exports.default = Input;