'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Dialog = require('./Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Prompt = require('./Prompt');

var _Prompt2 = _interopRequireDefault(_Prompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Modal = function (_Component) {
  _inherits(Modal, _Component);

  function Modal() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Modal);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal.__proto__ || Object.getPrototypeOf(Modal)).call.apply(_ref, [this].concat(args))), _this), _this.state = { shouldDisplay: false, isOpen: false }, _this.setModal = function (node) {
      if (node) {
        _this.modal = node;
      }
    }, _this.handleClick = function () {
      _this.setState({ shouldDisplay: !_this.state.shouldDisplay });
    }, _this.handleOpen = function () {
      setTimeout(function () {
        return _this.setState({ isOpen: true });
      }, 0);
    }, _this.handleClose = function (callback) {
      _this.setState({ isOpen: false }, function () {
        return setTimeout(function () {
          _this.modal.closePortal();
          if (typeof callback === 'function') {
            callback();
          }
        }, 300);
      });
    }, _this.handleBeforeClose = function (DOMNode, removeFromDOM) {
      _this.setState({ isOpen: false }, function () {
        return setTimeout(removeFromDOM, 300);
      });
    }, _this.handleAfterClose = function () {
      _this.setState({ shouldDisplay: false });
    }, _this.handleConfirm = function () {
      _this.props.onConfirm();
      _this.handleClose();
    }, _this.handleCancel = function () {
      _this.props.onCancel();
      _this.handleClose();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Modal, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var handleClose = this.handleClose,
          handleOpen = this.handleOpen,
          handleConfirm = this.handleConfirm,
          handleCancel = this.handleCancel,
          handleAfterClose = this.handleAfterClose,
          handleBeforeClose = this.handleBeforeClose,
          setModal = this.setModal;
      var _props = this.props,
          isOpen = _props.isOpen,
          type = _props.type,
          confirmLabel = _props.confirmLabel,
          cancelLabel = _props.cancelLabel,
          target = _props.target;


      var className = (0, _classnames2.default)('uk-modal', {
        'uk-open': this.state.isOpen
      });
      var style = {
        display: 'block'
      };

      var footer = [];
      if (type === 'alert') {
        footer = [function () {
          return React.createElement(
            _Button2.default,
            {
              primary: true,
              className: _this2.props.confirmButtonClass,
              onClick: handleConfirm
            },
            confirmLabel
          );
        }];
      }

      if (type === 'confirm' || type === 'prompt') {
        footer = [function () {
          return React.createElement(
            _Button2.default,
            { className: _this2.props.cancelButtonClass, onClick: handleCancel },
            cancelLabel
          );
        }, function () {
          return React.createElement(
            'span',
            null,
            '\xA0'
          );
        }, function () {
          return React.createElement(
            _Button2.default,
            {
              primary: true,
              className: _this2.props.confirmButtonClass,
              onClick: handleConfirm
            },
            confirmLabel
          );
        }];
      }

      var _props2 = this.props,
          children = _props2.children,
          dialogProps = _objectWithoutProperties(_props2, ['children']);

      var dialogChildren = void 0;
      if (type === 'prompt') {
        dialogChildren = React.createElement(
          _Prompt2.default,
          { isOpen: this.state.isOpen },
          children
        );
      } else {
        dialogChildren = children;
      }

      return React.createElement(
        _reactPortal2.default,
        {
          closeOnEsc: true,
          closeOnOutsideClick: true,
          beforeClose: handleBeforeClose,
          openByClickOn: target,
          ref: setModal,
          onClose: handleAfterClose,
          onOpen: handleOpen
        },
        React.createElement(
          'div',
          {
            'aria-hidden': isOpen,
            className: className,
            style: style,
            onClick: type === 'default' ? handleClose : undefined
          },
          React.createElement(
            _Dialog2.default,
            _extends({
              close: type === 'default',
              footer: footer,
              handleClose: handleClose
            }, dialogProps),
            dialogChildren
          )
        )
      );
    }
  }]);

  return Modal;
}(_react.Component);

Modal.propTypes = {
  children: _propTypes2.default.node.isRequired,
  target: _propTypes2.default.element.isRequired,
  cancelButtonClass: _propTypes2.default.string,
  cancelLabel: _propTypes2.default.string,
  confirmButtonClass: _propTypes2.default.string,
  confirmLabel: _propTypes2.default.string,
  isOpen: _propTypes2.default.bool,
  type: _propTypes2.default.string,
  onCancel: _propTypes2.default.func, // eslint-disable-line react/require-default-props
  onConfirm: _propTypes2.default.func // eslint-disable-line react/require-default-props
};
Modal.defaultProps = {
  cancelButtonClass: '',
  cancelLabel: 'Cancel',
  closeTimeoutMS: 0,
  confirmButtonClass: '',
  confirmLabel: 'Ok',
  isOpen: false,
  lightbox: false,
  shouldCloseOnOverlayClick: true,
  target: 'button',
  type: 'default'
};
exports.default = Modal;