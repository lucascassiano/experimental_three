'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dialog = function (_Component) {
  _inherits(Dialog, _Component);

  function Dialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call.apply(_ref, [this].concat(args))), _this), _this.handleOverlayClick = function (event) {
      return event.stopPropagation();
    }, _this.handleClose = function (callback) {
      _this.props.handleClose(callback);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dialog, [{
    key: 'render',
    value: function render() {
      var handleOverlayClick = this.handleOverlayClick,
          handleClose = this.handleClose;
      var _props = this.props,
          children = _props.children,
          header = _props.header,
          footer = _props.footer,
          caption = _props.caption,
          lightbox = _props.lightbox,
          blank = _props.blank,
          close = _props.close,
          large = _props.large;


      var dialogClassName = (0, _classnames2.default)('uk-modal-dialog', {
        'uk-modal-dialog-lightbox': lightbox,
        'uk-modal-dialog-blank': blank,
        'uk-modal-dialog-large': large
      });
      var closeClassName = 'uk-modal-close-default uk-close';

      return React.createElement(
        'div',
        { className: dialogClassName, onClick: handleOverlayClick },
        close && React.createElement(_Icon2.default, { className: closeClassName, component: 'button', icon: 'close-icon', type: 'button', onClick: handleClose }),
        header && React.createElement(
          'div',
          { className: 'uk-modal-header' },
          React.createElement(
            'h2',
            null,
            header
          )
        ),
        caption && React.createElement(
          'div',
          { className: 'uk-modal-caption' },
          caption
        ),
        React.createElement(
          'div',
          { className: 'uk-modal-body' },
          children
        ),
        footer.length > 0 && React.createElement(
          'div',
          { className: 'uk-modal-footer uk-text-right' },
          footer.map(function (component, i) {
            return (0, _react.createElement)(component, { key: i, handleClose: handleClose });
          })
        )
      );
    }
  }]);

  return Dialog;
}(_react.Component);

Dialog.defaultProps = {
  blank: false,
  caption: '',
  close: true,
  footer: [],
  header: '',
  large: false,
  lightbox: false
};
Dialog.propTypes = {
  children: _propTypes2.default.node.isRequired,
  handleClose: _propTypes2.default.func.isRequired,
  blank: _propTypes2.default.bool,
  caption: _propTypes2.default.string,
  close: _propTypes2.default.bool,
  footer: _propTypes2.default.array, // eslint-disable-line react/forbid-prop-types
  header: _propTypes2.default.string,
  large: _propTypes2.default.bool,
  lightbox: _propTypes2.default.bool
};
exports.default = Dialog;