'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _computedStyle = require('computed-style');

var _computedStyle2 = _interopRequireDefault(_computedStyle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Spinner = function (_PureComponent) {
  _inherits(Spinner, _PureComponent);

  function Spinner() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Spinner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Spinner.__proto__ || Object.getPrototypeOf(Spinner)).call.apply(_ref, [this].concat(args))), _this), _this.state = { size: 0, strokeWidth: 0 }, _this.setMeasurements = function () {
      _this.setState({
        size: _this.container.clientWidth,
        strokeWidth: parseFloat((0, _computedStyle2.default)(_this.circle, 'stroke-width'))
      });
    }, _this.setContainer = function (node) {
      if (node) {
        _this.container = node;
      }
    }, _this.setCircle = function (node) {
      if (node) {
        _this.circle = node;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Spinner, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setMeasurements();
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      this.setMeasurements();
    }
  }, {
    key: 'render',
    value: function render() {
      var className = this.props.className;
      var _state = this.state,
          size = _state.size,
          strokeWidth = _state.strokeWidth;

      var viewBox = '0 0 ' + size + ' ' + size;
      var diameter = Math.floor(size / 2);

      return React.createElement(
        'span',
        { className: (0, _classnames2.default)('uk-icon uk-spinner', className), ref: this.setContainer },
        React.createElement(
          'svg',
          {
            height: size,
            viewBox: viewBox,
            width: size,
            xmlns: 'http://www.w3.org/2000/svg'
          },
          React.createElement('circle', {
            cx: diameter,
            cy: diameter,
            fill: 'none',
            r: diameter - strokeWidth,
            ref: this.setCircle,
            stroke: '#000'
          })
        )
      );
    }
  }]);

  return Spinner;
}(_react.PureComponent);

Spinner.propTypes = {
  className: _propTypes2.default.string
};
Spinner.defaultProps = {
  className: ''
};
exports.default = Spinner;