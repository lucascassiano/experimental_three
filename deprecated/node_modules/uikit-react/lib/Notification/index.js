'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactPortal = require('react-portal');

var _reactPortal2 = _interopRequireDefault(_reactPortal);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _NotifyMesssage = require('./NotifyMesssage');

var _NotifyMesssage2 = _interopRequireDefault(_NotifyMesssage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Notification = function (_Component) {
  _inherits(Notification, _Component);

  function Notification() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Notification);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Notification.__proto__ || Object.getPrototypeOf(Notification)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isOpened: false
    }, _this.handleClick = function () {
      _this.setState({
        isOpened: true
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Notification, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          position = _props.position,
          notifications = _props.notifications;


      var className = (0, _classnames2.default)('uk-notification', {
        'uk-notification-top-center': position === 'top-center',
        'uk-notification-top-left': position === 'top-left',
        'uk-notification-top-right': position === 'top-right',
        'uk-notification-bottom-center': position === 'bottom-center',
        'uk-notification-bottom-left': position === 'bottom-left',
        'uk-notification-bottom-right': position === 'bottom-right'
      });
      return React.createElement(
        _reactPortal2.default,
        {
          isOpened: notifications.length > 0,
          onClose: this.handleClick
        },
        React.createElement(
          'div',
          { className: className },
          notifications.map(function (_ref2) {
            var type = _ref2.type,
                message = _ref2.message,
                id = _ref2.id,
                icon = _ref2.icon,
                isSticky = _ref2.isSticky,
                onClick = _ref2.onClick,
                timeout = _ref2.timeout;
            return React.createElement(
              _NotifyMesssage2.default,
              {
                icon: icon,
                isSticky: isSticky,
                key: id,
                timeout: timeout,
                type: type,
                onClick: onClick
              },
              message
            );
          })
        )
      );
    }
  }]);

  return Notification;
}(_react.Component);

Notification.propTypes = {
  notifications: _propTypes2.default.arrayOf(_propTypes2.default.object).isRequired,
  position: _propTypes2.default.string
};
Notification.defaultProps = {
  className: 'uk-notification',
  notifications: [],
  position: 'top-center',
  type: 'primary'
};
exports.default = Notification;