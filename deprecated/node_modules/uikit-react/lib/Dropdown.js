'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var links = {};

var subscribe = function subscribe(namespace, listener) {
  if (!links[namespace]) {
    links[namespace] = [];
  }

  var isSubscribed = true;

  links[namespace].push(listener);

  return function unsubscribe() {
    if (!isSubscribed) {
      return;
    }

    isSubscribed = false;

    var index = links[namespace].indexOf(listener);
    links[namespace].splice(index, 1);
  };
};
var dispatch = function dispatch(namespace) {
  var listeners = links[namespace];
  for (var i = 0; i < listeners.length; i++) {
    // eslint-disable-line no-plusplus
    var listener = listeners[i];
    listener();
  }
};

var Dropdown = function (_Component) {
  _inherits(Dropdown, _Component);

  function Dropdown() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dropdown);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isOpen: false
    }, _this.handleMouseEnter = function () {
      if (_this.leaveTimeout) {
        clearTimeout(_this.leaveTimeout);
      }
      if (_this.props.delay) {
        setTimeout(function () {
          _this.setState({ isOpen: true });
        }, _this.props.delay);
      } else {
        if (_this.props.link) {
          dispatch(_this.props.link);
        }
        _this.setState({ isOpen: true });
      }

      if (_this.props.mode === 'hover') {
        _this.setState({ isOpen: true });
      }
    }, _this.handleMouseLeave = function () {
      if (_this.props.remainTime) {
        _this.leaveTimeout = setTimeout(function () {
          _this.setState({ isOpen: false });
        }, _this.props.remainTime);
      } else {
        _this.setState({ isOpen: false });
      }
    }, _this.handleClick = function () {
      if (_this.props.mode === 'click') {
        _this.setState({ isOpen: !_this.state.isOpen });
      }

      if (_this.props.mode === 'hover') {
        _this.setState({ isOpen: false });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dropdown, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.link) {
        // listen to linked components
        this.unsubscribe = subscribe(this.props.link, function () {
          if (_this2.state.isOpen) {
            _this2.setState({ isOpen: false });
          }
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.leaveTimeout) {
        clearTimeout(this.leaveTimeout);
      }

      if (this.unsubscribe) {
        this.unsubscribe();
        this.unsubscribe = false;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var handleMouseEnter = this.handleMouseEnter,
          handleMouseLeave = this.handleMouseLeave,
          handleClick = this.handleClick;
      var _props = this.props,
          mode = _props.mode,
          component = _props.component,
          children = _props.children,
          className = _props.className;
      var isOpen = this.state.isOpen;


      var eventHandlers = {
        onClick: handleClick
      };
      if (mode === 'hover') {
        eventHandlers.onMouseEnter = handleMouseEnter;
        eventHandlers.onMouseLeave = handleMouseLeave;
      }

      if (typeof children === 'function') {
        return children(_extends({ isOpen: isOpen }, eventHandlers));
      }

      if (!Array.isArray(children) || children.length !== 2) {
        throw new Error('Children must be passed as array and must have two components.');
      }

      var _children = _slicedToArray(children, 2),
          target = _children[0],
          body = _children[1];

      // construct target Element


      var targetElement = (0, _react.cloneElement)(target, _extends({}, target.props, eventHandlers, {
        className: (0, _classnames2.default)(target.props.className, {
          'uk-open': isOpen
        })
      }));

      // construct body Element
      var bodyElement = (0, _react.cloneElement)(body, _extends({}, body.props, eventHandlers, {
        className: (0, _classnames2.default)(body.props.className, {
          'uk-open': isOpen
        })
      }));

      var WrapperComponent = component;

      return React.createElement(
        WrapperComponent,
        { className: className },
        targetElement,
        bodyElement
      );
    }
  }]);

  return Dropdown;
}(_react.Component);

Dropdown.propTypes = {
  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.arrayOf(_propTypes2.default.element)]).isRequired,
  delay: _propTypes2.default.number.isRequired,
  mode: _propTypes2.default.oneOf(['hover', 'click']).isRequired,
  remainTime: _propTypes2.default.number.isRequired,
  className: _propTypes2.default.string,
  component: _propTypes2.default.node,
  link: _propTypes2.default.string
};
Dropdown.defaultProps = {
  mode: 'hover',
  remainTime: 800,
  delay: 0,
  component: 'div',
  link: '',
  className: 'uk-inline'
};
exports.default = Dropdown;